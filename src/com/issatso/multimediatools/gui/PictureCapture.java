/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.issatso.multimediatools.gui;

import com.googlecode.javacv.OpenCVFrameGrabber;
import com.googlecode.javacv.cpp.opencv_core.IplImage;
import com.googlecode.javacv.cpp.opencv_highgui;
import static com.googlecode.javacv.cpp.opencv_highgui.cvSaveImage;
import com.issatso.multimediatools.assets.SettingsLoader;
import com.issatso.multimediatools.gui.PictureCapture.WebcamThread;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import org.apache.log4j.Logger;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

/**
 *
 * @author fathi jemli
 */
public class PictureCapture extends javax.swing.JInternalFrame {

    static org.apache.log4j.Logger logger = Logger.getRootLogger();

    /**
     * Creates new form PictureCapture
     */
    public PictureCapture() {
        initComponents();
        setVisible(true);
        addInternalFrameListener(new PictureCaptureFrameListener());
        settingsLoader = new SettingsLoader();
        settings = settingsLoader.loadSettings();
        photoprfx = settings.get("photoprefix");
        photoextension = settings.get("photoextension");
        rootDirectory = settings.get("rootDirectory");
        System.out.println(photoextension);
        System.out.println(photoprfx);
        System.out.println(rootDirectory);
        System.out.println(rootDirectory + "\\photos");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Take picture");
        setPreferredSize(new java.awt.Dimension(500, 600));
        setVisible(true);
        getContentPane().add(jLabel1, java.awt.BorderLayout.CENTER);

        jButton2.setText("Take picture");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    Date date = new Date();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH-mm-ss");
                    System.out.println(photoprfx + "_" + dateFormat.format(date) + "." + photoextension);
                    webcamThread.sleep(1000);
                    webcamThread.resume();

                    IplImage img = grabber.grab();
                    if (img != null) {
                        cvSaveImage(rootDirectory + "\\photos\\" + photoprfx + "_" + dateFormat.format(date) + "." + photoextension, img);
                        logger.info("Saving photo: " + rootDirectory + "\\photos\\" + photoprfx + "_" + dateFormat.format(date) + "." + photoextension);
                    }
                    PictureCapture.this.revalidate();
                    PictureCapture.this.repaint();
                } catch (Exception e) {
                    logger.warn(e.getMessage());
                    e.printStackTrace();
                }
                try {
                    InputStream in = new FileInputStream(new File("camera.wav"));
                    AudioStream audio = new AudioStream(in);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                    logger.warn(e.getMessage());
                    e.printStackTrace();
                }
            }
        });
    }//GEN-LAST:event_jButton2ActionPerformed

    class WebcamThread extends Thread {

        @Override
        public void run() {
            try {

                grabber = new OpenCVFrameGrabber(opencv_highgui.CV_CAP_ANY);
                grabber.start();
                IplImage image = grabber.grab();
                while (true && PictureCapture.this.isVisible() && image != null) {
                    originalImage = grabber.grab();
                    jLabel1.setIcon(new ImageIcon(originalImage.getBufferedImage()));
                    PictureCapture.this.revalidate();
                    PictureCapture.this.repaint();
                }
            } catch (Exception ex) {
                logger.warn(ex.getMessage());
                ex.printStackTrace();
            }
        }

    }

    class PictureCaptureFrameListener extends InternalFrameAdapter {

        @Override
        public void internalFrameOpened(InternalFrameEvent e) {
            webcamThread = new WebcamThread();
            webcamThread.start();
            System.out.println("frame opened");

        }

        @Override
        public void internalFrameActivated(InternalFrameEvent e) {
            webcamThread = new WebcamThread();
            webcamThread.start();
            System.out.println("internal activated: " + e.getSource().toString());
        }

        @Override
        public void internalFrameClosed(InternalFrameEvent e) {
            try {
                webcamThread.stop();
                grabber.stop();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            System.out.println("frame closed");
        }
    }

    private String photoprfx;
    private String rootDirectory;
    private String photoextension;
    private SettingsLoader settingsLoader;
    private Map<String, String> settings;
    private IplImage originalImage = null;
    private OpenCVFrameGrabber grabber = null;
    private WebcamThread webcamThread;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
